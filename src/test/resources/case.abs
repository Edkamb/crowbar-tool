module M;


data Type = Type1(Type t) | Type2 (Type t) |Type3;
class C{

    [Spec: Ensures(result != 0)] //success
    Int m1(Int i, Int j){
        Int k = 0;
        switch (i) {
           0 => k = 5;
           j => k = 10;
           l => k = 15;
           _ => k = 1;
        }
        return k;
    }

    [Spec: Ensures(result != 0)] //success
    Int m2(Int i, Int j){
        Int k = 0;
        switch (i) {
           0 => k = 5;
            l => k = -i;
           _ => k = 1;
        }
        return k;
    }

    [Spec: Ensures(result != 0)] //fail
    Int m3(Int i, Int j){
        Int k = 0;
        switch (i) {
           1 => k = 5;
           l => k = -i;
           _ => skip;
        }
        return k;
    }
    [Spec: Ensures(result != 0)] //success
    Int m4(Int i, Int j){
        Int k = 0;
        switch (i) {
           0 => k = 5;
           _ => k = -i;
        }
        return k;
    }

    [Spec: Ensures(result != 0)] //fail
    Int m5(Int i, Int j){
        Int k = 0;
        switch (i) {
           0 => k = 5;
           _ => skip;
        }
        return k;
    }
    [Spec: Ensures(result != 0)] //fail
    Int m6(Int i, Int j){
        Int k = 0;
        switch (i) {
           1 => k = 5;
           _ => skip;
        }
        return k;
    }

    [Spec: Ensures(result == !d)]
    Bool caseBoolSimpleSuccessMethod(Bool d){
        Bool res = True;
        switch(d) {
            True =>  res = False;
            _ =>  res = True;
        }
        return res;
    }

    [Spec: Ensures(result == False)]
    Bool localBoolVarSimpleSuccess(){
        Bool res = True;
        switch(res) {
            True =>  res = False;
            _ =>  res = True;
        }
        return res;
    }


    [Spec: Ensures(result == 1)]
    Int simpleInnerWildCardSuccess(){
        Int res = 0;
        Type x = Type1(Type2(Type3));
        switch(x) {
            Type1(_) =>  res = 1;
            _ =>  res = res;
        }
        return res;
    }

    [Spec: Ensures(result == 1)]
    Int fullConcrDTypeSuccess(){
        Int res = 0;
        Type x = Type1(Type2(Type3));
        switch(x) {
            Type1(Type2(Type3)) =>  res = 1;
            _ =>  res = res;
        }
        return res;
    }

    [Spec: Requires(x == Type1(Type2(Type3)))]
    [Spec: Ensures(result == 1)]
    Int fullConcrDTypeSuccessPre(Type x){
        Int res = 0;
        switch(x) {
            Type1(Type2(Type3)) =>  res = 1;
            _ =>  res = res;
        }
        return res;
    }

    [Spec: Ensures(result == 1)]
    Int innerWildCardSuccess(){
        Int res = 0;
        Type x = Type1(Type2(Type3));
        switch(x) {
            Type1(Type2(_)) =>  res = 1;
            _ =>  res = res;
        }
        return res;
    }

    [Spec: Ensures(result == 1)]
    Int innerWildCardPairSuccess(){
        Int res = 0;
        Pair<Type,Int> x = Pair(Type2(Type3),1);
        switch(x) {
            Pair(Type2(_),_) =>  res = 1;
            _ =>  res = res;
        }
        return res;
    }


    [Spec: Ensures(result == 1)]
    Int innerWildCardPairFail(){
        Int res = 0;
        Pair<Type,Int> x = Pair(Type2(Type3),1);
        switch(x) {
            Pair(Type2(_),2) =>  res = 1;
            _ =>  res = res;
        }
        return res;
    }

    [Spec: Ensures(result == 1)]
    Int doubleWildCardPairSuccess(){
        Int res = 0;
        Pair<Type,Int> x = Pair(Type2(Type3),1);
        switch(x) {
            Pair(Type2(_),_) =>  res = 1;
            _ =>  res = res;
        }
        return res;
    }


    [Spec: Requires(x == Pair(Type2(Type3),1))]
    [Spec: Ensures(result == 1)]
    Int doubleWildCardPairSuccessPre(Pair<Type, Int> x){
        Int res = 0;
        switch(x) {
            Pair(Type2(_),_) =>  res = 1;
            _ =>  res = res;
        }
        return res;
    }

    [Spec: Requires(x == Nothing)]
    [Spec: Ensures(result == 1)]
    Int maybeMatchSimpleSuccess(Maybe<Int> x) {
        Int v = 0;
        switch(x) {
            Nothing => v = 1;
            _ => v = 0;
        }
        return v;
    }

    [Spec: Requires(x == Nil)]
    [Spec: Ensures(result == 1)]
    Int listMatchSimpleSuccess(List<Int> x) {
        Int v = 0;
        switch(x) {
            Nil => v = 1;
            _ => v = 0;
        }
        return v;
    }

    [Spec: Requires(l == Cons(1,Nil))]
    [Spec: Ensures(result == 1)]
    Int listPlaceholderSimpleSuccess(List<Int> l){
        Int v = 0;
        switch (l) {
            Cons(head1,tail1) => v = head1;
            _ => v = 0;
        }
        return v;
    }

    [Spec: Requires(l == Cons(1,Nil))]
    [Spec: Ensures(result == 0)]
    Int listPlaceholderSimpleFail(List<Int> l){
        Int v = 0;
        switch (l) {
            Cons(head1,tail1) => v = head1;
            _ => v = 0;
        }
        return v;
    }

    [Spec: Requires(l == Just(1))]
    [Spec: Ensures(result == 1)]
    Int maybePlaceholderSimpleSuccess(Maybe<Int> l){
        Int v = 0;
        switch (l) {
            Just(x) => v = x;
            _ => v = 0;
        }
        return v;
    }

    [Spec: Requires(l == Just(1))]
    [Spec: Ensures(result == 0)]
    Int maybePlaceholderSimpleFail(Maybe<Int> l){
        Int v = 0;
        switch (l) {
            Just(x) => v = x;
            _ => v = 0;
        }
        return v;
    }

    [Spec : Requires(x == Cons(1, Nil))]
    [Spec : Ensures(result == 1)]
    Int listPlaceholdersSameNameMoreTypesSuccess(List<Int> x) {
        Int v = 0;
        switch (x) {
            Cons(head1, Cons(1,Nil)) => v= 2;
            Cons(_, head1)  => v=1;
        }
        return v;
    }


    [Spec: Ensures(result == 1)]
    Int nestedPlaceholderPairSuccess(){
        Int res = 0;
        Pair<Type,Int> x = Pair(Type2(Type3),1);
        switch(x) {
            Pair(Type2(_),aa) =>  res = aa;
            _ =>  res = res;
        }
        return res;
    }
}

{}
