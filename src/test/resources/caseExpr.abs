module CaseExpr;


data Type = Type1(Type t) | Type2 (Type t) |Type3;
data DType = DType1(DType dt,DType) | DType2 (DType dt) |DType3 | DType4;

data ComplexType = ComplexA | ComplexB;
data ComplexOption = Value(ComplexType) | None;

def Int fullIntFunc(Int i) = case i {1 => 0;};
def Type intParamTypeReturnFunc(Int i) = case i {1 => Type3;};
def Type constMatchFullTypeFunc(Type i) = case i {Type3 => Type3;};
def Type complexTypeMatchFunc(Type i) = case i {Type1(Type3) => Type3;};
def Type functorUsageFunc(Type i) = case i {Type1(Type3) => t(i);};

def Type patternMatchingIntTrivialType3Func(Int i) = case i {_ => Type3;};

def Type patternMatchingFunctor(Type i) = case i {Type1(res) => res; Type2(res) => res;};

def Type patternMatchingTypeTrivialType3Func(Type i) = case i {_ => Type3;};

def Type patternMatchingWrappedTypeFunc(Type i) = case i {Type1(_) => Type3; _ => Type2(Type3);};
def Type patternMatchingDoubleWrappedTypeFunc(Type i) = case i {Type1(Type1(_)) => Type3; _ => Type2(Type3);};

def DType patternMatchingFuncMatchFun(DType i) = case dt(i) {DType1(_,res) => res;};

[Spec: Requires(x == Nil)]
[Spec: Ensures(result == 1)]
def Int listMatchFuncSimpleSuccess(List<Int> x) = case x { Nil => 1 };

[Spec: Requires(x == Nothing)]
[Spec: Ensures(result == 1)]
def Int maybeMatchFuncSimpleSuccess(Maybe<Int> x) = case x { Nothing => 1 };

[Spec: Requires(x == Cons(1,Nil))]
[Spec: Ensures(result == 1)]
def Int oneElemListMatchFuncSimpleSuccess(List<Int> x) = case x { Cons(1,Nil) => 1 };

[Spec: Requires(x == Just(Nothing))]
[Spec: Ensures(result == 1)]
def Int wrappedMaybeMatchFuncSimpleSuccess(Maybe<Maybe<Int>> x) = case x { Just(Nothing) => 1 };

[Spec: Ensures(result == !d)]
def Bool caseBoolSimpleSuccessMethod(Bool d) =
    case d {
        True =>  False;
        _ =>  True;
    };

[Spec: Requires(pair==Pair(1,1))]
[Spec: Ensures(result == 1)]
def Int pairPartialMatchSimpleSuccess(Pair<Int,Int> pair) = case pair {Pair(1,_) => 1;};

//verifiable with z3
[Spec: Ensures(result == 1)]
def Int pairWildcardsNoPreSimpleSuccess(Pair<Int,Int> pair) = case pair {Pair(_,_) => 1;};

[Spec : Requires(x == Pair(1,1))]
[Spec : Ensures(result == 1)]
def Int pairPlaceholdersFuncSimpleSuccess(Pair<Int,Int> x) = case x { Pair(left,right) => left; };

[Spec : Requires(x == Pair(1,1))]
[Spec : Ensures(result == 1)]
def Int pairPlaceholderFuncWildcardSimpleSuccess(Pair<Int,Int> x) = case x { Pair(left,_) => left; };


[Spec : Requires(x == Just(1))]
[Spec : Ensures(result == 1)]
def Int maybePlaceholdersFuncSimpleSuccess(Maybe<Int> x) = case x { Just(y) => y; };

[Spec : Requires(x == Cons(1, Nil))]
[Spec : Ensures(result == 1)]
def Int listPlaceholdersFuncSimpleSuccess(List<Int> x) = case x { Cons(y, Nil) => y; };

def Int recSum(Pair<Int,Int> x) = case x {Pair(0,snd) => snd | Pair(fst1,snd1)=> when(fst1<0) then snd1 else recSum(Pair(fst1-1,snd1+1));};

def Int sumFstPairMultSndTrdList(Pair<Int,List<Int>> x) = case x {Pair(fst,Cons(snd,Cons(trd,_))) => fst+snd*trd;};


data DataList = DataNil | ConsData(Data, DataList) ;
type Data = Int ;

def Data dataHead(DataList dl) = case dl { ConsData(d,l) => d ; };
def DataList dataTail(DataList dl) = case dl { ConsData(d,l) => l ; };

def DataList appendData(Data d, DataList list)
  = concat(list, ConsData(d,DataNil));

def DataList concat(DataList l1 , DataList l2) =
case l1 {
    DataNil => l2 ;
    ConsData(hd,tl) => ConsData(hd, concat(tl,l2)) ;
};


class E(ComplexOption fieldA){

    Int fieldI = 0;

    [Spec : Requires( i == 1 )]
    [Spec : Ensures(result == 0)]
    Int fullIntSuccess(Int i){
        Int res = fullIntFunc(i);
        return res;
    }

    [Spec : Requires( i == 1 )]
    [Spec : Ensures(result == Type3)]
    Type intParamTypeReturnSuccess(Int i){
        Type res = intParamTypeReturnFunc(i);
        return res;
    }

    [Spec : Requires( i == Type3 )]
    [Spec : Ensures(result == Type3)]
    Type constMatchFullTypeSuccess(Type i){
        Type res = constMatchFullTypeFunc(i);
        return res;
    }

    [Spec : Requires( i == Type1(Type3) )]
    [Spec : Ensures(result == Type3)]
    Type complexTypeMatchSuccess(Type i){
        Type res = complexTypeMatchFunc(i);
        return res;
    }

    [Spec : Requires( i == Type1(Type3) )]
    [Spec : Ensures(result == Type3)]
    Type functorUsageSuccess(Type i){
        Type res = functorUsageFunc(i);
        return res;
    }

    [Spec : Ensures(result == Type3)]
    Type patternMatchingIntTrivialType3Success(Int i){
        Type res =  patternMatchingIntTrivialType3Func(i);
        return res;
    }

    [Spec : Requires(i != Type3)]
    [Spec : Ensures(t(i) == patternMatchingFunctor(i))]
    Type patternMatchingFunctorSuccess(Type i){
        Type res = i;
        return res;
    }

    [Spec : Ensures(t(i) == patternMatchingFunctor(i))]
    Type patternMatchingFunctorFail(Type i){
        Type res = i;
        return res;
    }

    [Spec : Ensures(result == Type3)]
    Type patternMatchingTypeTrivialType3Success(Type i){
        Type res =  patternMatchingTypeTrivialType3Func(i);
        return res;
    }

    [Spec : Requires(i == Type1(Type3))]
    [Spec : Ensures( result == Type3 ) ]
    Type patternMatchingWrapTypeFirstBranchSuccess(Type i){
        Type res = patternMatchingWrappedTypeFunc(i);
        return res;
    }

    [Spec : Requires(i == Type1(Type1(Type3)))]
    [Spec : Ensures( result == Type3 ) ]
    Type patternMatchingDoubleWrapTypeFirstBranchSuccess(Type i){
        Type res = patternMatchingDoubleWrappedTypeFunc(i);
        return res;
    }

    [Spec : Requires(i == Type1(Type2(Type3)))]
    [Spec : Ensures( result == Type3 ) ]
    Type patternMatchingDoubleWrapTypeFirstBranchFail(Type i){
        Type res = patternMatchingDoubleWrappedTypeFunc(i);
        return res;
    }

    [Spec : Requires( i == DType1(DType1(DType3, DType4),DType3) )]
    [Spec : Ensures(result == DType4)]
    DType patternMatchingFuncMatchSuccess(DType i){
        DType res = patternMatchingFuncMatchFun(i);
        return res;
    }

    [Spec : Ensures(result == 0)]
    Int assignmentCaseExprSuccess(){
        Int res = case fieldA {
            None => 0;
            Value(_) => 0;
        };

        return res;
    }

    [Spec:Ensures(result > 0)]
    Int nestedCaseExprsSuccess(Int x,Int y){
        return case (x) { 1=> 1; 2=>case(y){ 1=>1;_ => 2}; _ => 1};
    }

    [Spec:Ensures(result ==0)]
    Int nestedCaseExprsFail(Int x,Int y){
        return case (x) { 1=> 1; 2=>case(y){ 1=>1;_ => 2}; _ => 1};
    }

    [Spec:Ensures(result == 1)]
    Int nestedIfCaseExprsSuccess(Int x,Int y){
        Int i = 0;
        if( case (x) { 1=> 1; 2=>case(y){ 1=>1;_ => 2}; _ => 1} > 0)
            i = 1;
        else
            i = 0;
        return i;
    }

    [Spec:Requires(t == Type1(Type3))]
    [Spec:Ensures(this.fieldI == 1)]
    Unit caseExprUnequalReturnTypeSuccess(Type t){
        this.fieldI = case t {Type1(Type3) => 1;};
    }


    [Spec: Ensures(result == 5)]
    Int callRecFuncPlaceholdersNoContractSuccess(){
        return recSum(Pair(3,2));
    }


    [Spec: Ensures(result == 14)]
    Int callFuncNestedGenericsPlaceholdersNoContractSuccess(){
        return sumFstPairMultSndTrdList(Pair(2,Cons(3,Cons(4,Nil))));
    }

    [Spec: Ensures(result != 5)]
    Int callRecFuncPlaceholdersNoContractFail(){
        return recSum(Pair(3,2));
    }

    [Spec: Ensures(result != 14)]
    Int callFuncNestedGenericsPlaceholdersNoContractFail(){
        return sumFstPairMultSndTrdList(Pair(2,Cons(3,Cons(4,Nil))));
    }

}

{}

