module Old;

data Spec = ObjInv(Bool) | Ensures(Bool) | Requires(Bool) | WhileInv(Bool);

interface OldI {

    [Spec : Ensures(old(this.f)<this.f)]
    Unit inheritedSimpleSuccess();

    [Spec : Ensures(old(this.f)<this.f)]
    Unit inheritedSimpleFail();

    [Spec : Ensures(this.f == old(this.f) + 1)]
    Unit incr();

    [Spec : Ensures(old(this.f) < result)]
    Int retFIncr();
}

class OldC implements OldI {
    Int f = 0;

    [Spec : Ensures(old(this.f) == old(this.f))]
    Unit trivialSuccess(Int v){
        this.f = this.f + 1;
    }

    [Spec : Ensures(this.f == old(this.f) + 1)]
    Unit incrSuccess(){
        this.f = this.f + 1;
    }

    [Spec : Ensures(old(this.f) < old(this.f))]
    Unit trivialFail(Int v){
        this.f = this.f + 1;
    }

    [Spec : Ensures(old(this.f)<this.f)]
    Unit simpleSuccess(Int v){
        this.f = this.f + 1;
    }

    [Spec : Ensures(old(this.f)<this.f)]
    Unit simpleFail(){
        this.f = this.f;
    }

    Unit inheritedSimpleSuccess(){
        this.f = this.f + 1;
    }

    Unit inheritedSimpleFail(){
        this.f = this.f;
    }

    [Spec : Ensures((old(this.f) < this.f) == True)]
    Unit booleanValSuccess(){
        this.f = this.f + 1;
    }

    [Spec : Ensures(old(this.f < this.f) == True)]
    Unit booleanValFail(){
        this.f = this.f + 1;
    }

    [Spec : Ensures(old(this.f <= 0) || old(this.f > 0))]
    Unit predicateSimpleSuccess(){
        this.f = this.f + 1;
    }

    [Spec : Ensures(old(this.f <= 0) || False)]
    Unit predicateSimpleFail(){
        this.f = this.f + 1;
    }

    [Spec : Ensures(!old(this.f > 0) || (this.f > 1))]
    Unit predicateImplSuccess(){
        this.f = this.f + 1;
    }

    [Spec : Ensures(!old(this.f > 0) || old(this.f > 1))]
    Unit predicateImplFail(){
        this.f = this.f + 1;
    }

    [Spec : Ensures((!(old(this.f > 0) && old(f == 0)) || (this.f > 1)))]
    Unit predicateComplexSuccess(){
        this.f = this.f + 1;
    }

    [Spec : Ensures(old(this.f) < this.f)]
    Unit oldIfSuccess(Int i){
        if(i > 0){
            this.f = this.f + i;
        }else if(i < 0){
            this.f = this.f + (-1)*i;
        }else
            this.f = this.f + 1;
    }

    Unit incr(){
        this.f = this.f + 1;
    }

   [Spec : Ensures(old(this.f) + 1 < this.f)]
   Unit awaitSuccess(){
       await this!incr();
       this.f = this.f + 1;
   }

    Int retFIncr(){
        this.f = this.f + 1;
        return this.f;
    }

    [Spec : Requires(i>0)]
    [Spec : Ensures(old(this.f) < this.f)]
    Unit getSuccess(Int i){
       Fut<Int> f = this!retFIncr();
       await f?;
       this.f = f.get;
    }

    [Spec : Ensures(old(this.f) <= this.f)]
    Unit predicateWhileSuccess(Int i){

    	[Spec: WhileInv(old(this.f) <= this.f)]
        while(i>0){
            this.f = this.f + 1;
            i = i-1;
        }
    }
}


{}